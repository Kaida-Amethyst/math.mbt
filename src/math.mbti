// Generated using `moon info`, DON'T EDIT IT
package "Kaida-Amethyst/math"

// Values
const DIGITS : UInt = 15

const DOUBLE_EPSILON : Double = 2.2204460492503131e-16

const DOUBLE_MAX : Double = 1.7976931348623157E+308

const DOUBLE_MAX_10_EXP : Int = 308

const DOUBLE_MAX_EXP : Int = 1024

const DOUBLE_MIN : Double = -1.7976931348623157E+308

const DOUBLE_MIN_10_EXP : Int = -307

const DOUBLE_MIN_EXP : Int = -1021

const DOUBLE_MIN_POSITIVE : Double = 2.2250738585072014E-308

const DOUBLE_PI : Double = 3.14159265358979323846

const E : Double = 2.718281828459045235360287471352662497757247093699959574966967627724076630353547594571382178525166427

const FLOAT_EPSILON : Float = 1.1920928955078125e-7

const GOLDEN_RATIO : Double = 1.61803398874989484820

const INT64_MAX : Int64 = 9223372036854775807

const INT_MAX : Int = 2147483647

const INV_SQRT_PI : Double = 0.564189583547756286948

const LN10 : Double = 2.30258509299404568402

const LN2 : Double = 0.693147180559945309417

const LOG10E : Double = 0.434294481903251827651

const LOG2E : Double = 1.44269504088896340736

const LOGPI : Double = 1.14472988584940017414

const MANTISSA_DIGITS : UInt = 53

const ONE_OVER_PI : Double = 0.318309886183790671538

const PI_OVER_2 : Double = 1.57079632679489661923

const PI_OVER_4 : Double = 0.785398163397448309616

const RADIX : UInt = 2

const SQRT1_OVER_2 : Double = 0.707106781186547524401

const SQRT2 : Double = 1.41421356237309504880

const SQRT3 : Double = 1.73205080756887729353

const SQRT5 : Double = 2.23606797749978969640

const TWO_OVER_PI : Double = 0.636619772367581343076

const TWO_OVER_SQRTPI : Double = 1.12837916709551257390

const UINT64_MAX : UInt64 = 18446744073709551615

const UINT_MAX : UInt = 4294967295

fn acos(Double) -> Double

fn acosf(Float) -> Float

fn acosh(Double) -> Double

fn acoshf(Float) -> Float

fn airy_ai(Double) -> Double

fn asin(Double) -> Double

fn asinf(Float) -> Float

fn asinh(Double) -> Double

fn asinhf(Float) -> Float

fn atan(Double) -> Double

fn atan2(Double, Double) -> Double

fn atan2f(Float, Float) -> Float

fn atanf(Float) -> Float

fn atanh(Double) -> Double

fn atanhf(Float) -> Float

fn bessel_i0(Double) -> Double

fn bessel_i0e(Double) -> Double

fn bessel_i1(Double) -> Double

fn bessel_i1e(Double) -> Double

fn bessel_j0(Double) -> Double

fn bessel_j1(Double) -> Double

fn bessel_jn(Int, Double) -> Double

fn bessel_k0(Double) -> Double

fn bessel_k0e(Double) -> Double

fn bessel_k1(Double) -> Double

fn bessel_k1e(Double) -> Double

fn bessel_yn(Int, Double) -> Double

fn cbrt(Double) -> Double

fn cbrtf(Float) -> Float

fn ceil(Double) -> Double

fn chbevl(Double, Array[Double]) -> Double

fn clamp(Double, Double, Double) -> Double

fn cos(Double) -> Double

fn cosf(Float) -> Float

fn cosh(Double) -> Double

fn coshf(Float) -> Float

fn cospi(Double) -> Double

fn digamma(Double) -> Double

fn div_euclid(Double, Double) -> Double

fn entr(Double) -> Double

fn erf(Double) -> Double

fn erfc(Double) -> Double

fn erfce(Double) -> Double

fn erfcinv(Double) -> Double

fn erfcx(Double) -> Double

fn erfinv(Double) -> Double

fn exp(Double) -> Double

fn exp10(Double) -> Double

fn exp2(Double) -> Double

fn expf(Float) -> Float

fn expm1(Double) -> Double

fn expm1f(Float) -> Float

fn expx2(Double, Int) -> Double

fn fast_rsqrt(Float) -> Float

fn fdim(Double, Double) -> Double

fn floor(Double) -> Double

fn fma(Double, Double, Double) -> Double

fn fract(Double) -> Double

fn frexp(Double) -> (Double, Int)

fn gamma(Double) -> Double

fn gdtr(Double, Double, Double) -> Double

fn gdtrc(Double, Double, Double) -> Double

fn gegenbauer(UInt, Double, Double) -> Double

fn gegenbauer_derivative(UInt, Double, Double, UInt) -> Double

fn gegenbauer_prime(UInt, Double, Double) -> Double

fn gelu(Double) -> Double

fn hermite(UInt, Double) -> Double

fn hypot(Double, Double) -> Double

fn hypotf(Float, Float) -> Float

fn i0(Double) -> Double

fn i0e(Double) -> Double

fn i1(Double) -> Double

fn i1e(Double) -> Double

fn igam(Double, Double) -> Double

fn igami(Double, Double) -> Double

fn ilogb(Double) -> Int

fn inv_digamma(Double) -> Double

fn isfinite(Double) -> Bool

fn isinf(Double) -> Bool

fn isnan(Double) -> Bool

fn isninf(Double) -> Bool

fn isnormal(Double) -> Bool

fn ispinf(Double) -> Bool

fn issubnormal(Double) -> Bool

fn j0(Double) -> Double

fn j1(Double) -> Double

fn jn(Int, Double) -> Double

fn k0(Double) -> Double

fn k0e(Double) -> Double

fn k1(Double) -> Double

fn k1e(Double) -> Double

fn ldexp(Double, Int) -> Double

fn lerp(Double, Double, Double) -> Double

fn lgamma(Double) -> Double

fn ln(Double) -> Double

fn ln_1p(Double) -> Double

fn ln_1pf(Float) -> Float

fn ln_gamma(Double) -> Double

fn log(Double) -> Double

fn log10(Double) -> Double

fn log10f(Float) -> Float

fn log1p(Double) -> Double

fn log1pf(Float) -> Float

fn log2(Double) -> Double

fn log2f(Float) -> Float

fn log_ndtr(Double) -> Double

fn logaddexp(Double, Double) -> Double

fn logf(Float) -> Float

fn logsumexp(Array[Double]) -> Double

fn ndtr(Double) -> Double

fn ndtri(Double) -> Double

fn nearbyint(Double, round_mode~ : RoundMode = ..) -> Double

fn nextafter(Double, Double) -> Double

fn norm(Array[Double]) -> Double

fn norm3d(Double, Double, Double) -> Double

fn norm4d(Double, Double, Double, Double) -> Double

fn normcdf(Double) -> Double

fn normcdfinv(Double) -> Double

fn p1evl(Double, Array[Double]) -> Double

fn pdtr(Int, Double) -> Double

fn pdtrc(Int, Double) -> Double

fn pdtri(Int, Double) -> Double

fn polevl(Double, Array[Double]) -> Double

fn polygamma(Double, Int) -> Double

fn pow(Double, Double) -> Double

fn powf(Float, Float) -> Float

fn powi(Double, Int) -> Double

fn pown(Double, Int) -> Double

fn rcbrt(Double) -> Double

fn rem_euclid(Double, Double) -> Double

fn rhypot(Double, Double) -> Double

fn rint(Double, round_mode~ : RoundMode = ..) -> Double

fn rnorm(Array[Double]) -> Double

fn rnorm3d(Double, Double, Double) -> Double

fn rnorm4d(Double, Double, Double, Double) -> Double

fn round(Double) -> Double

fn roundeven(Double) -> Double

fn rsqrt(Double) -> Double

fn scalbn(Double, Int) -> Double

fn scalbnf(Float, Int) -> Float

fn signum(Double) -> Double

fn sin(Double) -> Double

fn sinc(Double) -> Double

fn sincos(Double) -> (Double, Double)

fn sincospi(Double) -> (Double, Double)

fn sinf(Float) -> Float

fn sinh(Double) -> Double

fn sinhf(Float) -> Float

fn sinpi(Double) -> Double

fn sqrt(Double) -> Double

fn sqrt1pm1(Double) -> Double

fn sqrtf(Float) -> Float

fn tan(Double) -> Double

fn tanf(Float) -> Float

fn tanh(Double) -> Double

fn tanhf(Float) -> Float

fn to_degrees(Double) -> Double

fn to_radians(Double) -> Double

fn trigamma(Double) -> Double

fn trunc(Double) -> Double

fn ulp_error(Double, Double) -> Int64

fn ulp_error_f32(Float, Float) -> Int

fn y0(Double) -> Double

fn y1(Double) -> Double

fn yn(Int, Double) -> Double

fn zeta(Double, Double) -> Double

// Types and methods
pub(all) enum RoundMode {
  FE_TONEAREST
  FE_DOWNWARD
  FE_UPWARD
  FE_TOWARDZERO
}

// Type aliases

// Traits

